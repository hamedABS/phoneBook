Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding type registration boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@7823a2f9
Adding type registration true_false -> org.hibernate.type.TrueFalseType@6767c1fc
Adding type registration yes_no -> org.hibernate.type.YesNoType@cc285f4
Adding type registration byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration character -> org.hibernate.type.CharacterType@d8355a8
Adding type registration char -> org.hibernate.type.CharacterType@d8355a8
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@d8355a8
Adding type registration short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration integer -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration int -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration long -> org.hibernate.type.LongType@5c3bd550
Adding type registration long -> org.hibernate.type.LongType@5c3bd550
Adding type registration java.lang.Long -> org.hibernate.type.LongType@5c3bd550
Adding type registration float -> org.hibernate.type.FloatType@4883b407
Adding type registration float -> org.hibernate.type.FloatType@4883b407
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4883b407
Adding type registration double -> org.hibernate.type.DoubleType@5442a311
Adding type registration double -> org.hibernate.type.DoubleType@5442a311
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@5442a311
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6eebc39e
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6eebc39e
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@57fffcd7
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@57fffcd7
Adding type registration string -> org.hibernate.type.StringType@5f341870
Adding type registration java.lang.String -> org.hibernate.type.StringType@5f341870
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@42dafa95
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2f686d1f
Adding type registration url -> org.hibernate.type.UrlType@6fd02e5
Adding type registration java.net.URL -> org.hibernate.type.UrlType@6fd02e5
Adding type registration date -> org.hibernate.type.DateType@72d818d1
Adding type registration java.sql.Date -> org.hibernate.type.DateType@72d818d1
Adding type registration time -> org.hibernate.type.TimeType@56ef9176
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@56ef9176
Adding type registration timestamp -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4bec1f0c
Adding type registration calendar -> org.hibernate.type.CalendarType@49993335
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@49993335
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@49993335
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@64bfbc86
Adding type registration locale -> org.hibernate.type.LocaleType@6e1ec318
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@6e1ec318
Adding type registration currency -> org.hibernate.type.CurrencyType@3c0f93f1
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3c0f93f1
Adding type registration timezone -> org.hibernate.type.TimeZoneType@a67c67e
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@a67c67e
Adding type registration class -> org.hibernate.type.ClassType@5ce81285
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@5ce81285
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@3632be31
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@3632be31
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4e9ba398
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@370736d9
Adding type registration binary -> org.hibernate.type.BinaryType@18eed359
Adding type registration byte[] -> org.hibernate.type.BinaryType@18eed359
Adding type registration [B -> org.hibernate.type.BinaryType@18eed359
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration image -> org.hibernate.type.ImageType@57536d79
Adding type registration characters -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration char[] -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration [C -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration text -> org.hibernate.type.TextType@61f8bee4
Adding type registration ntext -> org.hibernate.type.NTextType@6e0e048a
Adding type registration blob -> org.hibernate.type.BlobType@6321e813
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6321e813
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@57855c9a
Adding type registration clob -> org.hibernate.type.ClobType@694e1548
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@694e1548
Adding type registration nclob -> org.hibernate.type.NClobType@394e1a0f
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@394e1a0f
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@5f282abb
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@4d95d2a2
Adding type registration serializable -> org.hibernate.type.SerializableType@6acdbdf5
Adding type registration object -> org.hibernate.type.ObjectType@e320068
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@e320068
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@704a52ec
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@6ee52dcd
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@4493d195
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2781e022
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@57e1b0c
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@4232c52b
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1877ab81
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@305fd85d
HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
HHH000412: Hibernate Core {4.3.1.Final}
HHH000206: hibernate.properties not found
HHH000021: Bytecode provider name : javassist
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
HHH000043: Configuring from resource: /hibernate.cfg.xml
HHH000040: Configuration resource: /hibernate.cfg.xml
Resolving XML entity -//Hibernate/Hibernate Configuration DTD 3.0//EN : http://hibernate.org/dtd/hibernate-configuration-3.0.dtd
Trying to resolve system-id [http://hibernate.org/dtd/hibernate-configuration-3.0.dtd]
hibernate.connection.driver_class=com.mysql.jdbc.Driver
hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook
hibernate.connection.username=root
hibernate.connection.password=
hibernate.connection.pool_size=1
hbm2ddl.auto=update
hibernate.show_sql=true
Session-factory config [null] named resource [Role.hbm.xml] for mapping
HHH000221: Reading mappings from resource: Role.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
Session-factory config [null] named resource [Contact.hbm.xml] for mapping
HHH000221: Reading mappings from resource: Contact.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
Session-factory config [null] named resource [User.hbm.xml] for mapping
HHH000221: Reading mappings from resource: User.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
HHH000041: Configured SessionFactory: null
Properties: {hibernate.connection.password=, java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_101\jre\bin, java.vm.version=25.101-b13, hibernate.connection.username=root, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.script=, user.country=US, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=G:\JavaProjects\phoneBook, java.runtime.version=1.8.0_101-b13, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hbm2ddl.auto=update, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\endorsed, os.arch=amd64, java.io.tmpdir=C:\Users\HAMED-~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_101\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Git\cmd;C:\Program Files\PuTTY\;C:\Program Files\Java\jdk1.8.0_101\bin;C:\Users\Hamed-Abbaszadeh\AppData\Local\Microsoft\WindowsApps;;C:\modeltech64_10.5\win64;C:\Program Files (x86)\Nmap;., java.specification.name=Java Platform API Specification, java.class.version=52.0, hibernate.connection.pool_size=1, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Hamed-Abbaszadeh, user.timezone=Asia/Tehran, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=UTF-8, java.specification.version=1.8, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.class.path=C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\plugins\junit\lib\junit-rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;G:\JavaProjects\phoneBook\target\test-classes;G:\JavaProjects\phoneBook\target\classes;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\servlet\javax.servlet-api\4.0.0\javax.servlet-api-4.0.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-maven-plugin\4.3.1.Final\hibernate-maven-plugin-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-plugin-api\3.0.5\maven-plugin-api-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-model\3.0.5\maven-model-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.6\plexus-utils-2.0.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-artifact\3.0.5\maven-artifact-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\2.3.0\sisu-inject-plexus-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.4\plexus-classworlds-2.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-bean\2.3.0\sisu-inject-bean-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guice\3.1.0\sisu-guice-3.1.0-no_aop.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guava\0.9.9\sisu-guava-0.9.9.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\plugin-tools\maven-plugin-annotations\3.2\maven-plugin-annotations-3.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-core\4.3.1.Final\hibernate-core-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\jandex\1.1.0.Final\jandex-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\mysql\mysql-connector-java\8.0.9-rc\mysql-connector-java-8.0.9-rc.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.26\jersey-container-servlet-core-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\javax.inject\2.5.0-b42\javax.inject-2.5.0-b42.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-server\2.26\jersey-server-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-jaxb\2.26\jersey-media-jaxb-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\javax.ws.rs-api\2.1\javax.ws.rs-api-2.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\projectlombok\lombok\1.16.20\lombok-1.16.20.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-json-jackson\2.26\jersey-media-json-jackson-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\ext\jersey-entity-filtering\2.26\jersey-entity-filtering-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.8.4\jackson-module-jaxb-annotations-2.8.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-client\2.26\jersey-client-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-common\2.26-b03\jersey-common-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\repackaged\jersey-guava\2.26-b03\jersey-guava-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-api\2.5.0-b36\hk2-api-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-utils\2.5.0-b36\hk2-utils-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\aopalliance-repackaged\2.5.0-b36\aopalliance-repackaged-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-locator\2.5.0-b36\hk2-locator-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-client\1.19.4\jersey-client-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-core\1.19.4\jersey-core-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\jsr311-api\1.1.1\jsr311-api-1.1.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\io\jsonwebtoken\jjwt\0.2\jjwt-0.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.0\jackson-databind-2.9.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.4\jackson-core-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.4\jackson-annotations-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\jaxrs-ri\2.21\jaxrs-ri-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet\2.21\jersey-container-servlet-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar, user.name=Hamed-Abbaszadeh, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.8, sun.java.command=com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 ir.maktab.unit_test.user_test.UserCrudTest,getById, java.home=C:\Program Files\Java\jdk1.8.0_101\jre, sun.arch.data.model=64, hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook, user.language=en, java.specification.vendor=Oracle Corporation, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_101, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\classes, java.vendor=Oracle Corporation, file.separator=\, hibernate.hbm2ddl.auto=update, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, idea.test.cyclic.buffer.size=1048576, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, sun.cpu.isalist=amd64}
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Cache71] -> [org.hibernate.dialect.Cache71Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [CUBRID] -> [org.hibernate.dialect.CUBRIDDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2] -> [org.hibernate.dialect.DB2Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2390] -> [org.hibernate.dialect.DB2390Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2400] -> [org.hibernate.dialect.DB2400Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenFive] -> [org.hibernate.dialect.DerbyTenFiveDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenSix] -> [org.hibernate.dialect.DerbyTenSixDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenSeven] -> [org.hibernate.dialect.DerbyTenSevenDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Firebird] -> [org.hibernate.dialect.FirebirdDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [FrontBase] -> [org.hibernate.dialect.FrontBaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [H2] -> [org.hibernate.dialect.H2Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [HSQL] -> [org.hibernate.dialect.HSQLDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Informix] -> [org.hibernate.dialect.InformixDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres] -> [org.hibernate.dialect.IngresDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres9] -> [org.hibernate.dialect.Ingres9Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres10] -> [org.hibernate.dialect.Ingres10Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Interbase] -> [org.hibernate.dialect.InterbaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [JDataStore] -> [org.hibernate.dialect.JDataStoreDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Mckoi] -> [org.hibernate.dialect.MckoiDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MimerSQL] -> [org.hibernate.dialect.MimerSQLDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5] -> [org.hibernate.dialect.MySQL5Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5InnoDB] -> [org.hibernate.dialect.MySQL5InnoDBDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5] -> [org.hibernate.dialect.MySQL5Dialect] (replacing [org.hibernate.dialect.MySQL5Dialect])
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5InnoDB] -> [org.hibernate.dialect.MySQL5InnoDBDialect] (replacing [org.hibernate.dialect.MySQL5InnoDBDialect])
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle8i] -> [org.hibernate.dialect.Oracle8iDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle9i] -> [org.hibernate.dialect.Oracle9iDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle10g] -> [org.hibernate.dialect.Oracle10gDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Pointbase] -> [org.hibernate.dialect.PointbaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgresPlus] -> [org.hibernate.dialect.PostgresPlusDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL81] -> [org.hibernate.dialect.PostgreSQL81Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL82] -> [org.hibernate.dialect.PostgreSQL82Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL9] -> [org.hibernate.dialect.PostgreSQL9Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Progress] -> [org.hibernate.dialect.ProgressDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SAPDB] -> [org.hibernate.dialect.SAPDBDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer] -> [org.hibernate.dialect.SQLServerDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer2005] -> [org.hibernate.dialect.SQLServer2005Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer2008] -> [org.hibernate.dialect.SQLServer2008Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Sybase11] -> [org.hibernate.dialect.Sybase11Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseAnywhere] -> [org.hibernate.dialect.SybaseAnywhereDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseASE15] -> [org.hibernate.dialect.SybaseASE15Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseASE157] -> [org.hibernate.dialect.SybaseASE157Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Teradata] -> [org.hibernate.dialect.TeradataDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [TimesTen] -> [org.hibernate.dialect.TimesTenDialect]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Borland] -> [org.hibernate.engine.transaction.jta.platform.internal.BorlandEnterpriseServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.BorlandEnterpriseServerJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.BorlandEnterpriseServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Bitronix] -> [org.hibernate.engine.transaction.jta.platform.internal.BitronixJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.BitronixJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.BitronixJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JBossAS] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossAppServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossAppServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JBossTS] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossStandAloneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossStandAloneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JOnAS] -> [org.hibernate.engine.transaction.jta.platform.internal.JOnASJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JOnASJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JOnASJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JOTM] -> [org.hibernate.engine.transaction.jta.platform.internal.JOTMJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JOTMJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JOTMJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JRun4] -> [org.hibernate.engine.transaction.jta.platform.internal.JRun4JtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JRun4JtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JRun4JtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [OC4J] -> [org.hibernate.engine.transaction.jta.platform.internal.OC4JJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.OC4JJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.OC4JJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Orion] -> [org.hibernate.engine.transaction.jta.platform.internal.OrionJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.OrionJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.OrionJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Resin] -> [org.hibernate.engine.transaction.jta.platform.internal.ResinJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.ResinJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.ResinJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [SunOne] -> [org.hibernate.engine.transaction.jta.platform.internal.SunOneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.SunOneJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.SunOneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Weblogic] -> [org.hibernate.engine.transaction.jta.platform.internal.WeblogicJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WeblogicJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WeblogicJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [WebSphere] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WebSphereJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [WebSphereExtended] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [jdbc] -> [org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [jta] -> [org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [cmt] -> [org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory]
Registering named strategy selector [org.hibernate.hql.spi.MultiTableBulkIdStrategy] : [persistent] -> [org.hibernate.hql.spi.PersistentTableBulkIdStrategy]
Registering named strategy selector [org.hibernate.hql.spi.MultiTableBulkIdStrategy] : [temporary] -> [org.hibernate.hql.spi.TemporaryTableBulkIdStrategy]
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Preparing to build session factory with filters : {}
Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/phoneBook]
HHH000046: Connection properties: {user=root, password=}
HHH000006: Autocommit mode: false
HHH000115: Hibernate connection pool size: 1 (min=1)
Initializing Connection pool with 1 Connections
Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
Database ->
       name : MySQL
    version : 5.7.14
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-8.0.9-rc ( Revision: 740a66923ca31f71558f3e1559a237e59353d32e )
      major : 8
      minor : 0
JDBC version : 4.2
Unexpected error trying to gauge level of JDBC REF_CURSOR support : null
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Starting secondPassCompile() processing
Processing hbm.xml files
Mapping class: ir.maktab.model.role.Role -> role
Mapped property: id -> id
Mapped property: name -> name
Mapping collection: ir.maktab.model.role.Role.features -> role_features
Mapped property: features
Mapping class: ir.maktab.model.role.Feature -> feature
Mapped property: id -> id
Mapped property: name -> name
Mapping class: ir.maktab.model.contact.Contact -> contact
Mapped property: id -> id
Mapped property: firstName -> firstName
Mapped property: lastName -> lastName
Mapped property: email -> email
Mapped property: mobile -> mobile
Mapped property: home -> home
Mapping class: ir.maktab.model.user.User -> user
Mapped property: id -> id
Mapped property: firstName -> firstName
Mapped property: lastName -> lastName
Mapped property: password -> password
Mapped property: username -> username
Mapped property: role -> role
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Second pass for collection: ir.maktab.model.role.Role.features
Mapped collection key: role_id, element: elt
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Resolving reference to class: ir.maktab.model.role.Feature
Resolving reference to class: ir.maktab.model.role.Role
Resolving reference to class: ir.maktab.model.role.Role
Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform]
No JtaPlatform was specified, checking resolver
Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatformResolver]
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
Initializing service [role=org.hibernate.engine.transaction.spi.TransactionFactory]
HHH000399: Using default transaction strategy (direct JDBC transactions)
Interpreting BatchFetchStyle from setting : null
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 2
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: disabled
Second-level cache: enabled
Query cache: disabled
Initializing service [role=org.hibernate.cache.spi.RegionFactory]
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
Initializing service [role=org.hibernate.engine.spi.CacheImplementor]
Scoping types to session factory org.hibernate.internal.SessionFactoryImpl@5a56cdac
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.password=, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_101\jre\bin, java.vm.version=25.101-b13, hibernate.connection.username=root, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.script=, user.country=US, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=G:\JavaProjects\phoneBook, java.runtime.version=1.8.0_101-b13, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hbm2ddl.auto=update, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\endorsed, os.arch=amd64, java.io.tmpdir=C:\Users\HAMED-~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_101\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Git\cmd;C:\Program Files\PuTTY\;C:\Program Files\Java\jdk1.8.0_101\bin;C:\Users\Hamed-Abbaszadeh\AppData\Local\Microsoft\WindowsApps;;C:\modeltech64_10.5\win64;C:\Program Files (x86)\Nmap;., java.specification.name=Java Platform API Specification, java.class.version=52.0, hibernate.connection.pool_size=1, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Hamed-Abbaszadeh, user.timezone=Asia/Tehran, java.awt.printerjob=sun.awt.windows.WPrinterJob, java.specification.version=1.8, file.encoding=UTF-8, hibernate.connection.driver_class=com.mysql.jdbc.Driver, user.name=Hamed-Abbaszadeh, java.class.path=C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\plugins\junit\lib\junit-rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;G:\JavaProjects\phoneBook\target\test-classes;G:\JavaProjects\phoneBook\target\classes;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\servlet\javax.servlet-api\4.0.0\javax.servlet-api-4.0.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-maven-plugin\4.3.1.Final\hibernate-maven-plugin-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-plugin-api\3.0.5\maven-plugin-api-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-model\3.0.5\maven-model-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.6\plexus-utils-2.0.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-artifact\3.0.5\maven-artifact-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\2.3.0\sisu-inject-plexus-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.4\plexus-classworlds-2.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-bean\2.3.0\sisu-inject-bean-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guice\3.1.0\sisu-guice-3.1.0-no_aop.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guava\0.9.9\sisu-guava-0.9.9.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\plugin-tools\maven-plugin-annotations\3.2\maven-plugin-annotations-3.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-core\4.3.1.Final\hibernate-core-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\jandex\1.1.0.Final\jandex-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\mysql\mysql-connector-java\8.0.9-rc\mysql-connector-java-8.0.9-rc.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.26\jersey-container-servlet-core-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\javax.inject\2.5.0-b42\javax.inject-2.5.0-b42.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-server\2.26\jersey-server-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-jaxb\2.26\jersey-media-jaxb-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\javax.ws.rs-api\2.1\javax.ws.rs-api-2.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\projectlombok\lombok\1.16.20\lombok-1.16.20.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-json-jackson\2.26\jersey-media-json-jackson-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\ext\jersey-entity-filtering\2.26\jersey-entity-filtering-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.8.4\jackson-module-jaxb-annotations-2.8.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-client\2.26\jersey-client-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-common\2.26-b03\jersey-common-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\repackaged\jersey-guava\2.26-b03\jersey-guava-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-api\2.5.0-b36\hk2-api-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-utils\2.5.0-b36\hk2-utils-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\aopalliance-repackaged\2.5.0-b36\aopalliance-repackaged-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-locator\2.5.0-b36\hk2-locator-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-client\1.19.4\jersey-client-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-core\1.19.4\jersey-core-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\jsr311-api\1.1.1\jsr311-api-1.1.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\io\jsonwebtoken\jjwt\0.2\jjwt-0.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.0\jackson-databind-2.9.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.4\jackson-core-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.4\jackson-annotations-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\jaxrs-ri\2.21\jaxrs-ri-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet\2.21\jersey-container-servlet-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.8, sun.arch.data.model=64, java.home=C:\Program Files\Java\jdk1.8.0_101\jre, sun.java.command=com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 ir.maktab.unit_test.user_test.UserCrudTest,getById, hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook, java.specification.vendor=Oracle Corporation, user.language=en, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_101, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\classes, java.vendor=Oracle Corporation, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.hbm2ddl.auto=update, idea.test.cyclic.buffer.size=1048576, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, sun.desktop=windows, sun.cpu.isalist=amd64}
Unable to acquire Bean Validation ValidatorFactory, skipping activation
Skipping JACC integration as it was not enabled
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
Skipping duplicate registration of path [name], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [features], existing type = [org.hibernate.type.SetType(ir.maktab.model.role.Role.features)], incoming type = [org.hibernate.type.SetType(ir.maktab.model.role.Role.features)]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [lastName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [email], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [mobile], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [home], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [name], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [lastName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [password], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [username], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [role], existing type = [org.hibernate.type.ManyToOneType(ir.maktab.model.role.Role)], incoming type = [org.hibernate.type.ManyToOneType(ir.maktab.model.role.Role)]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Static SQL for collection: ir.maktab.model.role.Role.features
 Row insert: insert into role_features (role_id, elt) values (?, ?)
 Row update: update role_features set elt=? where role_id=? and elt=?
 Row delete: delete from role_features where role_id=? and elt=?
 One-shot delete: delete from role_features where role_id=?
Static SQL for entity: ir.maktab.model.role.Role
 Version select: select id from role where id =?
 Snapshot select: select role_.id, role_.name as name2_2_ from role role_ where role_.id=?
 Insert 0: insert into role (name, id) values (?, ?)
 Update 0: update role set name=? where id=?
 Delete 0: delete from role where id=?
 Identity insert: insert into role (name) values (?)
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@56dc1551]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27912e3
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27912e3
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27912e3
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [NONE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d99c6b5]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@266374ef
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@266374ef
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@266374ef
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [READ]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13b3d178]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@24c4ddae
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@24c4ddae
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@24c4ddae
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@37fb0bed]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@a82c5f1
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@a82c5f1
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@a82c5f1
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE_NOWAIT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b7fdc8]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@51c693d
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@51c693d
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@51c693d
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE_SKIPLOCKED]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6a57ae10]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@766653e6
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@766653e6
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@766653e6
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [FORCE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e07b95f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@28b46423
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@28b46423
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@28b46423
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_READ]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7fc4780b]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b79fd76
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b79fd76
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b79fd76
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_WRITE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48c76607]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@43599640
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@43599640
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@43599640
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_FORCE_INCREMENT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1f81aa00]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b6776cb
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b6776cb
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b6776cb
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [OPTIMISTIC]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1863d2fe]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1787bc24
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1787bc24
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1787bc24
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [OPTIMISTIC_FORCE_INCREMENT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.role.Role: select role0_.id as id1_2_1_, role0_.name as name2_2_1_, features1_.role_id as role_id1_2_3_, feature2_.id as elt2_3_3_, feature2_.id as id1_1_0_, feature2_.name as name2_1_0_ from role role0_ left outer join role_features features1_ on role0_.id=features1_.role_id left outer join feature feature2_ on features1_.elt=feature2_.id where role0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.role.Role: select role0_.id as id1_2_1_, role0_.name as name2_2_1_, features1_.role_id as role_id1_2_3_, feature2_.id as elt2_3_3_, feature2_.id as id1_1_0_, feature2_.name as name2_1_0_ from role role0_ left outer join role_features features1_ on role0_.id=features1_.role_id left outer join feature feature2_ on features1_.elt=feature2_.id where role0_.id=?
Static SQL for entity: ir.maktab.model.contact.Contact
 Version select: select id from contact where id =?
 Snapshot select: select contact_.id, contact_.firstName as firstNam2_0_, contact_.lastName as lastName3_0_, contact_.email as email4_0_, contact_.mobile as mobile5_0_, contact_.home as home6_0_ from contact contact_ where contact_.id=?
 Insert 0: insert into contact (firstName, lastName, email, mobile, home, id) values (?, ?, ?, ?, ?, ?)
 Update 0: update contact set firstName=?, lastName=?, email=?, mobile=?, home=? where id=?
 Delete 0: delete from contact where id=?
 Identity insert: insert into contact (firstName, lastName, email, mobile, home) values (?, ?, ?, ?, ?)
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7cb502c]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@275bf9b3
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@275bf9b3
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@275bf9b3
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [NONE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1b8a29df]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4fbe37eb
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4fbe37eb
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4fbe37eb
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [READ]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@12a94400]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6a47b187
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6a47b187
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6a47b187
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2049a9c1]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1ef6d34c
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1ef6d34c
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1ef6d34c
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE_NOWAIT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@46271dd6]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@11bb571c
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@11bb571c
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@11bb571c
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE_SKIPLOCKED]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5495333e]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2a225dd7
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2a225dd7
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2a225dd7
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [FORCE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@61eaec38]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@125290e5
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@125290e5
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@125290e5
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_READ]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fa34d52]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@57576994
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@57576994
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@57576994
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_WRITE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@616ac46a]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@67b9b51a
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@67b9b51a
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@67b9b51a
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_FORCE_INCREMENT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1205bd62]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7ef27d7f
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7ef27d7f
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7ef27d7f
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [OPTIMISTIC]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@490caf5f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6337c201
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6337c201
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6337c201
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [OPTIMISTIC_FORCE_INCREMENT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.contact.Contact: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.contact.Contact: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static SQL for entity: ir.maktab.model.role.Feature
 Version select: select id from feature where id =?
 Snapshot select: select feature_.id, feature_.name as name2_1_ from feature feature_ where feature_.id=?
 Insert 0: insert into feature (name, id) values (?, ?)
 Update 0: update feature set name=? where id=?
 Delete 0: delete from feature where id=?
 Identity insert: insert into feature (name) values (?)
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c669da8]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31920ade
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31920ade
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31920ade
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [NONE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d483de4]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4032d386
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4032d386
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4032d386
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [READ]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@28d18df5]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@934b6cb
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@934b6cb
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@934b6cb
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55cf0d14]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b74ac8
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b74ac8
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3b74ac8
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE_NOWAIT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27adc16e]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b83a9be
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b83a9be
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b83a9be
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE_SKIPLOCKED]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2609b277]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1fd14d74
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1fd14d74
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1fd14d74
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [FORCE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@563e4951]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4066c471
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4066c471
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4066c471
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_READ]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b175c00]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3eb81efb
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3eb81efb
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3eb81efb
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_WRITE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ae8bcbc]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6cdba6dc
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6cdba6dc
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6cdba6dc
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_FORCE_INCREMENT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7d3d101b]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@30c8681
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@30c8681
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@30c8681
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [OPTIMISTIC]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5cdec700]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6d026701
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6d026701
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6d026701
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [OPTIMISTIC_FORCE_INCREMENT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.role.Feature: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.role.Feature: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static SQL for entity: ir.maktab.model.user.User
 Version select: select id from user where id =?
 Snapshot select: select user_.id, user_.firstName as firstNam2_4_, user_.lastName as lastName3_4_, user_.password as password4_4_, user_.username as username5_4_, user_.role as role6_4_ from user user_ where user_.id=?
 Insert 0: insert into user (firstName, lastName, password, username, role, id) values (?, ?, ?, ?, ?, ?)
 Update 0: update user set firstName=?, lastName=?, password=?, username=?, role=? where id=?
 Delete 0: delete from user where id=?
 Identity insert: insert into user (firstName, lastName, password, username, role) values (?, ?, ?, ?, ?)
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78aa1f72]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1f75a668
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1f75a668
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1f75a668
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [NONE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35399441]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b7dc788
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b7dc788
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b7dc788
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [READ]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6304101a]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5170bcf4
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5170bcf4
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5170bcf4
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2812b107]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@df6620a
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@df6620a
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@df6620a
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE_NOWAIT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e31276e]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1a72a540
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1a72a540
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1a72a540
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE_SKIPLOCKED]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27d5a580]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@198d6542
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@198d6542
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@198d6542
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [FORCE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e403b4a]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5117dd67
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5117dd67
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5117dd67
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_READ]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5be49b60]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2931522b
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2931522b
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2931522b
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_WRITE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7674b62c]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e7a160
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e7a160
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e7a160
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@662706a7]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@45a4b042
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@45a4b042
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@45a4b042
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [OPTIMISTIC]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@16b2bb0c]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@327af41b
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@327af41b
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@327af41b
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.user.User: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.user.User: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root collection : ir.maktab.model.role.Role.features
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1fb19a0]
Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5082d622]
Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@63eef88a
 Registering AssociationKey : AssociationKey(table=role_features, columns={role_id}) -> null
 Starting collection element graph : ir.maktab.model.role.Role.features
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5a9f4771
.. Registering AssociationKey : AssociationKey(table=role_features, columns={elt}) -> org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5a9f4771
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5a9f4771
 Finished collection element graph : ir.maktab.model.role.Role.features
Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@63eef88a
 Finished root collection : ir.maktab.model.role.Role.features
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(collection=ir.maktab.model.role.Role.features)
    - Returns
       - CollectionReturnImpl(collection=ir.maktab.model.role.Role.features, querySpaceUid=<gen:0>, path=[ir.maktab.model.role.Role.features])
          - (collection element) CollectionFetchableElementEntityGraph(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:1>, path=[ir.maktab.model.role.Role.features].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=ir.maktab.model.role.Role.features)
          - SQL table alias mapping - features0_
          - alias suffix - 0_
          - suffixed key columns - {role_id1_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=ir.maktab.model.role.Feature)
                - SQL table alias mapping - feature1_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}

Static select for collection ir.maktab.model.role.Role.features: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=?
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@3148f668
Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
Registering SessionFactory: 91c11a32-c2fe-4853-a207-f518e673da78 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Starting secondPassCompile() processing
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Resolving reference to class: ir.maktab.model.role.Feature
Resolving reference to class: ir.maktab.model.role.Role
Resolving reference to class: ir.maktab.model.role.Role
Interpreting UniqueConstraintSchemaUpdateStrategy from setting : null
HHH000261: Table found: phonebook.contact
HHH000037: Columns: [firstname, mobile, id, email, lastname, home]
HHH000108: Foreign keys: []
HHH000126: Indexes: [uk_fall7a0t29r8fl38o1jlw8i3u, uk_gnqwbwwcn7x0m5jlt4158dass, primary, uk_2wfgmlebss5qjexvt021nge9j]
HHH000261: Table found: phonebook.feature
HHH000037: Columns: [name, id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: phonebook.role
HHH000037: Columns: [name, id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [uk_8sewwnpamngi6b1dwaa88askk, primary]
HHH000261: Table found: phonebook.role_features
HHH000037: Columns: [role_id, elt]
HHH000108: Foreign keys: []
HHH000126: Indexes: [fk_rtvpansxg6tbacol3obxytjq3, primary]
HHH000261: Table found: phonebook.user
HHH000037: Columns: [firstname, password, role, id, lastname, username]
HHH000108: Foreign keys: []
HHH000126: Indexes: [fk_dl7g53f7lpmorjc24kx74apx8, uk_sb8bbouer5wak8vyiiy4pf2bx, primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
alter table role_features add constraint FK_gx7g05jbqjx7evhxdlch6o0du foreign key (role_id) references role (id)
HHH000232: Schema update complete
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
Statistics initialized [enabled=false]
Adding type registration boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@675d3402
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@7823a2f9
Adding type registration true_false -> org.hibernate.type.TrueFalseType@6767c1fc
Adding type registration yes_no -> org.hibernate.type.YesNoType@cc285f4
Adding type registration byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1d057a39
Adding type registration character -> org.hibernate.type.CharacterType@d8355a8
Adding type registration char -> org.hibernate.type.CharacterType@d8355a8
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@d8355a8
Adding type registration short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@3ffc5af1
Adding type registration integer -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration int -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3e6fa38a
Adding type registration long -> org.hibernate.type.LongType@5c3bd550
Adding type registration long -> org.hibernate.type.LongType@5c3bd550
Adding type registration java.lang.Long -> org.hibernate.type.LongType@5c3bd550
Adding type registration float -> org.hibernate.type.FloatType@4883b407
Adding type registration float -> org.hibernate.type.FloatType@4883b407
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4883b407
Adding type registration double -> org.hibernate.type.DoubleType@5442a311
Adding type registration double -> org.hibernate.type.DoubleType@5442a311
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@5442a311
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6eebc39e
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6eebc39e
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@57fffcd7
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@57fffcd7
Adding type registration string -> org.hibernate.type.StringType@5f341870
Adding type registration java.lang.String -> org.hibernate.type.StringType@5f341870
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@42dafa95
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2f686d1f
Adding type registration url -> org.hibernate.type.UrlType@6fd02e5
Adding type registration java.net.URL -> org.hibernate.type.UrlType@6fd02e5
Adding type registration date -> org.hibernate.type.DateType@72d818d1
Adding type registration java.sql.Date -> org.hibernate.type.DateType@72d818d1
Adding type registration time -> org.hibernate.type.TimeType@56ef9176
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@56ef9176
Adding type registration timestamp -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b952a2d
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4bec1f0c
Adding type registration calendar -> org.hibernate.type.CalendarType@49993335
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@49993335
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@49993335
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@64bfbc86
Adding type registration locale -> org.hibernate.type.LocaleType@6e1ec318
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@6e1ec318
Adding type registration currency -> org.hibernate.type.CurrencyType@3c0f93f1
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3c0f93f1
Adding type registration timezone -> org.hibernate.type.TimeZoneType@a67c67e
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@a67c67e
Adding type registration class -> org.hibernate.type.ClassType@5ce81285
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@5ce81285
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@3632be31
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@3632be31
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4e9ba398
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@370736d9
Adding type registration binary -> org.hibernate.type.BinaryType@18eed359
Adding type registration byte[] -> org.hibernate.type.BinaryType@18eed359
Adding type registration [B -> org.hibernate.type.BinaryType@18eed359
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@335eadca
Adding type registration image -> org.hibernate.type.ImageType@57536d79
Adding type registration characters -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration char[] -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration [C -> org.hibernate.type.CharArrayType@369f73a2
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1d16f93d
Adding type registration text -> org.hibernate.type.TextType@61f8bee4
Adding type registration ntext -> org.hibernate.type.NTextType@6e0e048a
Adding type registration blob -> org.hibernate.type.BlobType@6321e813
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6321e813
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@57855c9a
Adding type registration clob -> org.hibernate.type.ClobType@694e1548
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@694e1548
Adding type registration nclob -> org.hibernate.type.NClobType@394e1a0f
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@394e1a0f
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@5f282abb
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@4d95d2a2
Adding type registration serializable -> org.hibernate.type.SerializableType@6acdbdf5
Adding type registration object -> org.hibernate.type.ObjectType@e320068
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@e320068
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@130e116b
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@e383572
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@5ddf0d24
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@363a52f
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60856961
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@2fd953a6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@a4add54
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@141e5bef
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
HHH000043: Configuring from resource: /hibernate.cfg.xml
HHH000040: Configuration resource: /hibernate.cfg.xml
Resolving XML entity -//Hibernate/Hibernate Configuration DTD 3.0//EN : http://hibernate.org/dtd/hibernate-configuration-3.0.dtd
Trying to resolve system-id [http://hibernate.org/dtd/hibernate-configuration-3.0.dtd]
hibernate.connection.driver_class=com.mysql.jdbc.Driver
hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook
hibernate.connection.username=root
hibernate.connection.password=
hibernate.connection.pool_size=1
hbm2ddl.auto=update
hibernate.show_sql=true
Session-factory config [null] named resource [Role.hbm.xml] for mapping
HHH000221: Reading mappings from resource: Role.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
Session-factory config [null] named resource [Contact.hbm.xml] for mapping
HHH000221: Reading mappings from resource: Contact.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
Session-factory config [null] named resource [User.hbm.xml] for mapping
HHH000221: Reading mappings from resource: User.hbm.xml
Resolving XML entity -//Hibernate/Hibernate Mapping DTD//EN : http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
Trying to resolve system-id [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd]
Recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
Located [http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd] in classpath
HHH000041: Configured SessionFactory: null
Properties: {hibernate.connection.password=, java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_101\jre\bin, java.vm.version=25.101-b13, hibernate.connection.username=root, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.script=, user.country=US, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=G:\JavaProjects\phoneBook, java.runtime.version=1.8.0_101-b13, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hbm2ddl.auto=update, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\endorsed, os.arch=amd64, java.io.tmpdir=C:\Users\HAMED-~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_101\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Git\cmd;C:\Program Files\PuTTY\;C:\Program Files\Java\jdk1.8.0_101\bin;C:\Users\Hamed-Abbaszadeh\AppData\Local\Microsoft\WindowsApps;;C:\modeltech64_10.5\win64;C:\Program Files (x86)\Nmap;., java.specification.name=Java Platform API Specification, java.class.version=52.0, hibernate.connection.pool_size=1, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Hamed-Abbaszadeh, user.timezone=Asia/Tehran, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=UTF-8, java.specification.version=1.8, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.class.path=C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\plugins\junit\lib\junit-rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;G:\JavaProjects\phoneBook\target\test-classes;G:\JavaProjects\phoneBook\target\classes;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\servlet\javax.servlet-api\4.0.0\javax.servlet-api-4.0.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-maven-plugin\4.3.1.Final\hibernate-maven-plugin-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-plugin-api\3.0.5\maven-plugin-api-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-model\3.0.5\maven-model-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.6\plexus-utils-2.0.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-artifact\3.0.5\maven-artifact-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\2.3.0\sisu-inject-plexus-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.4\plexus-classworlds-2.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-bean\2.3.0\sisu-inject-bean-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guice\3.1.0\sisu-guice-3.1.0-no_aop.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guava\0.9.9\sisu-guava-0.9.9.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\plugin-tools\maven-plugin-annotations\3.2\maven-plugin-annotations-3.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-core\4.3.1.Final\hibernate-core-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\jandex\1.1.0.Final\jandex-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\mysql\mysql-connector-java\8.0.9-rc\mysql-connector-java-8.0.9-rc.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.26\jersey-container-servlet-core-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\javax.inject\2.5.0-b42\javax.inject-2.5.0-b42.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-server\2.26\jersey-server-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-jaxb\2.26\jersey-media-jaxb-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\javax.ws.rs-api\2.1\javax.ws.rs-api-2.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\projectlombok\lombok\1.16.20\lombok-1.16.20.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-json-jackson\2.26\jersey-media-json-jackson-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\ext\jersey-entity-filtering\2.26\jersey-entity-filtering-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.8.4\jackson-module-jaxb-annotations-2.8.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-client\2.26\jersey-client-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-common\2.26-b03\jersey-common-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\repackaged\jersey-guava\2.26-b03\jersey-guava-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-api\2.5.0-b36\hk2-api-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-utils\2.5.0-b36\hk2-utils-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\aopalliance-repackaged\2.5.0-b36\aopalliance-repackaged-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-locator\2.5.0-b36\hk2-locator-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-client\1.19.4\jersey-client-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-core\1.19.4\jersey-core-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\jsr311-api\1.1.1\jsr311-api-1.1.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\io\jsonwebtoken\jjwt\0.2\jjwt-0.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.0\jackson-databind-2.9.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.4\jackson-core-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.4\jackson-annotations-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\jaxrs-ri\2.21\jaxrs-ri-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet\2.21\jersey-container-servlet-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar, user.name=Hamed-Abbaszadeh, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.8, sun.java.command=com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 ir.maktab.unit_test.user_test.UserCrudTest,getById, java.home=C:\Program Files\Java\jdk1.8.0_101\jre, sun.arch.data.model=64, hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook, user.language=en, java.specification.vendor=Oracle Corporation, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_101, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\classes, java.vendor=Oracle Corporation, file.separator=\, hibernate.hbm2ddl.auto=update, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, idea.test.cyclic.buffer.size=1048576, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, sun.cpu.isalist=amd64}
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Cache71] -> [org.hibernate.dialect.Cache71Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [CUBRID] -> [org.hibernate.dialect.CUBRIDDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2] -> [org.hibernate.dialect.DB2Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2390] -> [org.hibernate.dialect.DB2390Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DB2400] -> [org.hibernate.dialect.DB2400Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenFive] -> [org.hibernate.dialect.DerbyTenFiveDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenSix] -> [org.hibernate.dialect.DerbyTenSixDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [DerbyTenSeven] -> [org.hibernate.dialect.DerbyTenSevenDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Firebird] -> [org.hibernate.dialect.FirebirdDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [FrontBase] -> [org.hibernate.dialect.FrontBaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [H2] -> [org.hibernate.dialect.H2Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [HSQL] -> [org.hibernate.dialect.HSQLDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Informix] -> [org.hibernate.dialect.InformixDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres] -> [org.hibernate.dialect.IngresDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres9] -> [org.hibernate.dialect.Ingres9Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Ingres10] -> [org.hibernate.dialect.Ingres10Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Interbase] -> [org.hibernate.dialect.InterbaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [JDataStore] -> [org.hibernate.dialect.JDataStoreDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Mckoi] -> [org.hibernate.dialect.MckoiDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MimerSQL] -> [org.hibernate.dialect.MimerSQLDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5] -> [org.hibernate.dialect.MySQL5Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5InnoDB] -> [org.hibernate.dialect.MySQL5InnoDBDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5] -> [org.hibernate.dialect.MySQL5Dialect] (replacing [org.hibernate.dialect.MySQL5Dialect])
Registering named strategy selector [org.hibernate.dialect.Dialect] : [MySQL5InnoDB] -> [org.hibernate.dialect.MySQL5InnoDBDialect] (replacing [org.hibernate.dialect.MySQL5InnoDBDialect])
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle8i] -> [org.hibernate.dialect.Oracle8iDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle9i] -> [org.hibernate.dialect.Oracle9iDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Oracle10g] -> [org.hibernate.dialect.Oracle10gDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Pointbase] -> [org.hibernate.dialect.PointbaseDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgresPlus] -> [org.hibernate.dialect.PostgresPlusDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL81] -> [org.hibernate.dialect.PostgreSQL81Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL82] -> [org.hibernate.dialect.PostgreSQL82Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [PostgreSQL9] -> [org.hibernate.dialect.PostgreSQL9Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Progress] -> [org.hibernate.dialect.ProgressDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SAPDB] -> [org.hibernate.dialect.SAPDBDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer] -> [org.hibernate.dialect.SQLServerDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer2005] -> [org.hibernate.dialect.SQLServer2005Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SQLServer2008] -> [org.hibernate.dialect.SQLServer2008Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Sybase11] -> [org.hibernate.dialect.Sybase11Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseAnywhere] -> [org.hibernate.dialect.SybaseAnywhereDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseASE15] -> [org.hibernate.dialect.SybaseASE15Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [SybaseASE157] -> [org.hibernate.dialect.SybaseASE157Dialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [Teradata] -> [org.hibernate.dialect.TeradataDialect]
Registering named strategy selector [org.hibernate.dialect.Dialect] : [TimesTen] -> [org.hibernate.dialect.TimesTenDialect]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Borland] -> [org.hibernate.engine.transaction.jta.platform.internal.BorlandEnterpriseServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.BorlandEnterpriseServerJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.BorlandEnterpriseServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Bitronix] -> [org.hibernate.engine.transaction.jta.platform.internal.BitronixJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.BitronixJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.BitronixJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JBossAS] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossAppServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossAppServerJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JBossTS] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossStandAloneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JBossStandAloneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JOnAS] -> [org.hibernate.engine.transaction.jta.platform.internal.JOnASJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JOnASJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JOnASJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JOTM] -> [org.hibernate.engine.transaction.jta.platform.internal.JOTMJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JOTMJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JOTMJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [JRun4] -> [org.hibernate.engine.transaction.jta.platform.internal.JRun4JtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.JRun4JtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.JRun4JtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [OC4J] -> [org.hibernate.engine.transaction.jta.platform.internal.OC4JJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.OC4JJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.OC4JJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Orion] -> [org.hibernate.engine.transaction.jta.platform.internal.OrionJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.OrionJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.OrionJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Resin] -> [org.hibernate.engine.transaction.jta.platform.internal.ResinJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.ResinJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.ResinJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [SunOne] -> [org.hibernate.engine.transaction.jta.platform.internal.SunOneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.SunOneJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.SunOneJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [Weblogic] -> [org.hibernate.engine.transaction.jta.platform.internal.WeblogicJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WeblogicJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WeblogicJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [WebSphere] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WebSphereJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [WebSphereExtended] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform] : [org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform] -> [org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [jdbc] -> [org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [jta] -> [org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [cmt] -> [org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory]
Registering named strategy selector [org.hibernate.engine.transaction.spi.TransactionFactory] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory]
Registering named strategy selector [org.hibernate.hql.spi.MultiTableBulkIdStrategy] : [persistent] -> [org.hibernate.hql.spi.PersistentTableBulkIdStrategy]
Registering named strategy selector [org.hibernate.hql.spi.MultiTableBulkIdStrategy] : [temporary] -> [org.hibernate.hql.spi.TemporaryTableBulkIdStrategy]
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Preparing to build session factory with filters : {}
Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/phoneBook]
HHH000046: Connection properties: {user=root, password=}
HHH000006: Autocommit mode: false
HHH000115: Hibernate connection pool size: 1 (min=1)
Initializing Connection pool with 1 Connections
Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
Database ->
       name : MySQL
    version : 5.7.14
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-8.0.9-rc ( Revision: 740a66923ca31f71558f3e1559a237e59353d32e )
      major : 8
      minor : 0
JDBC version : 4.2
Unexpected error trying to gauge level of JDBC REF_CURSOR support : null
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Starting secondPassCompile() processing
Processing hbm.xml files
Mapping class: ir.maktab.model.role.Role -> role
Mapped property: id -> id
Mapped property: name -> name
Mapping collection: ir.maktab.model.role.Role.features -> role_features
Mapped property: features
Mapping class: ir.maktab.model.role.Feature -> feature
Mapped property: id -> id
Mapped property: name -> name
Mapping class: ir.maktab.model.contact.Contact -> contact
Mapped property: id -> id
Mapped property: firstName -> firstName
Mapped property: lastName -> lastName
Mapped property: email -> email
Mapped property: mobile -> mobile
Mapped property: home -> home
Mapping class: ir.maktab.model.user.User -> user
Mapped property: id -> id
Mapped property: firstName -> firstName
Mapped property: lastName -> lastName
Mapped property: password -> password
Mapped property: username -> username
Mapped property: role -> role
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Second pass for collection: ir.maktab.model.role.Role.features
Mapped collection key: role_id, element: elt
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Resolving reference to class: ir.maktab.model.role.Feature
Resolving reference to class: ir.maktab.model.role.Role
Resolving reference to class: ir.maktab.model.role.Role
Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform]
No JtaPlatform was specified, checking resolver
Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatformResolver]
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
Initializing service [role=org.hibernate.engine.transaction.spi.TransactionFactory]
HHH000399: Using default transaction strategy (direct JDBC transactions)
Interpreting BatchFetchStyle from setting : null
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 2
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: disabled
Second-level cache: enabled
Query cache: disabled
Initializing service [role=org.hibernate.cache.spi.RegionFactory]
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
Initializing service [role=org.hibernate.engine.spi.CacheImplementor]
Scoping types to session factory org.hibernate.internal.SessionFactoryImpl@545b995e
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.password=, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_101\jre\bin, java.vm.version=25.101-b13, hibernate.connection.username=root, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.script=, user.country=US, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=G:\JavaProjects\phoneBook, java.runtime.version=1.8.0_101-b13, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hbm2ddl.auto=update, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\endorsed, os.arch=amd64, java.io.tmpdir=C:\Users\HAMED-~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_101\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Git\cmd;C:\Program Files\PuTTY\;C:\Program Files\Java\jdk1.8.0_101\bin;C:\Users\Hamed-Abbaszadeh\AppData\Local\Microsoft\WindowsApps;;C:\modeltech64_10.5\win64;C:\Program Files (x86)\Nmap;., java.specification.name=Java Platform API Specification, java.class.version=52.0, hibernate.connection.pool_size=1, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Hamed-Abbaszadeh, user.timezone=Asia/Tehran, java.awt.printerjob=sun.awt.windows.WPrinterJob, java.specification.version=1.8, file.encoding=UTF-8, hibernate.connection.driver_class=com.mysql.jdbc.Driver, user.name=Hamed-Abbaszadeh, java.class.path=C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\plugins\junit\lib\junit-rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;G:\JavaProjects\phoneBook\target\test-classes;G:\JavaProjects\phoneBook\target\classes;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\servlet\javax.servlet-api\4.0.0\javax.servlet-api-4.0.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-maven-plugin\4.3.1.Final\hibernate-maven-plugin-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-plugin-api\3.0.5\maven-plugin-api-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-model\3.0.5\maven-model-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.6\plexus-utils-2.0.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\maven-artifact\3.0.5\maven-artifact-3.0.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\2.3.0\sisu-inject-plexus-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.4\plexus-classworlds-2.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-inject-bean\2.3.0\sisu-inject-bean-2.3.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guice\3.1.0\sisu-guice-3.1.0-no_aop.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\sonatype\sisu\sisu-guava\0.9.9\sisu-guava-0.9.9.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\apache\maven\plugin-tools\maven-plugin-annotations\3.2\maven-plugin-annotations-3.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\hibernate-core\4.3.1.Final\hibernate-core-4.3.1.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\jboss\jandex\1.1.0.Final\jandex-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\mysql\mysql-connector-java\8.0.9-rc\mysql-connector-java-8.0.9-rc.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.26\jersey-container-servlet-core-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\javax.inject\2.5.0-b42\javax.inject-2.5.0-b42.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-server\2.26\jersey-server-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-jaxb\2.26\jersey-media-jaxb-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\javax.ws.rs-api\2.1\javax.ws.rs-api-2.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\projectlombok\lombok\1.16.20\lombok-1.16.20.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\media\jersey-media-json-jackson\2.26\jersey-media-json-jackson-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\ext\jersey-entity-filtering\2.26\jersey-entity-filtering-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.8.4\jackson-module-jaxb-annotations-2.8.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-client\2.26\jersey-client-2.26.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\core\jersey-common\2.26-b03\jersey-common-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\repackaged\jersey-guava\2.26-b03\jersey-guava-2.26-b03.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-api\2.5.0-b36\hk2-api-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-utils\2.5.0-b36\hk2-utils-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\external\aopalliance-repackaged\2.5.0-b36\aopalliance-repackaged-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\hk2-locator\2.5.0-b36\hk2-locator-2.5.0-b36.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-client\1.19.4\jersey-client-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\sun\jersey\jersey-core\1.19.4\jersey-core-1.19.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\javax\ws\rs\jsr311-api\1.1.1\jsr311-api-1.1.1.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\io\jsonwebtoken\jjwt\0.2\jjwt-0.2.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.0\jackson-databind-2.9.0.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.4\jackson-core-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.4\jackson-annotations-2.9.4.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\bundles\jaxrs-ri\2.21\jaxrs-ri-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\org\glassfish\jersey\containers\jersey-container-servlet\2.21\jersey-container-servlet-2.21.jar;C:\Users\Hamed-Abbaszadeh\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2017.1.4\lib\idea_rt.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.8, sun.arch.data.model=64, java.home=C:\Program Files\Java\jdk1.8.0_101\jre, sun.java.command=com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 ir.maktab.unit_test.user_test.UserCrudTest,getById, hibernate.connection.url=jdbc:mysql://localhost:3306/phoneBook, java.specification.vendor=Oracle Corporation, user.language=en, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_101, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\classes, java.vendor=Oracle Corporation, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.hbm2ddl.auto=update, idea.test.cyclic.buffer.size=1048576, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, sun.desktop=windows, sun.cpu.isalist=amd64}
Unable to acquire Bean Validation ValidatorFactory, skipping activation
Skipping JACC integration as it was not enabled
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
Skipping duplicate registration of path [name], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [features], existing type = [org.hibernate.type.SetType(ir.maktab.model.role.Role.features)], incoming type = [org.hibernate.type.SetType(ir.maktab.model.role.Role.features)]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [lastName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [email], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [mobile], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [home], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [name], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [lastName], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [password], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [username], existing type = [org.hibernate.type.StringType@5f341870], incoming type = [org.hibernate.type.StringType@5f341870]
Skipping duplicate registration of path [role], existing type = [org.hibernate.type.ManyToOneType(ir.maktab.model.role.Role)], incoming type = [org.hibernate.type.ManyToOneType(ir.maktab.model.role.Role)]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [role.id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3e6fa38a], incoming type = [org.hibernate.type.IntegerType@3e6fa38a]
Static SQL for collection: ir.maktab.model.role.Role.features
 Row insert: insert into role_features (role_id, elt) values (?, ?)
 Row update: update role_features set elt=? where role_id=? and elt=?
 Row delete: delete from role_features where role_id=? and elt=?
 One-shot delete: delete from role_features where role_id=?
Static SQL for entity: ir.maktab.model.role.Role
 Version select: select id from role where id =?
 Snapshot select: select role_.id, role_.name as name2_2_ from role role_ where role_.id=?
 Insert 0: insert into role (name, id) values (?, ?)
 Update 0: update role set name=? where id=?
 Delete 0: delete from role where id=?
 Identity insert: insert into role (name) values (?)
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@50d13246]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2bd08376
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2bd08376
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2bd08376
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [NONE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@e70f13a]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3d3e5463
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3d3e5463
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3d3e5463
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [READ]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64a40280]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b40f651
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b40f651
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b40f651
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@42b02722]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d62fe5b
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d62fe5b
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d62fe5b
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE_NOWAIT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@49964d75]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@528c868
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@528c868
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@528c868
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [UPGRADE_SKIPLOCKED]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@466276d8]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5ce8d869
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5ce8d869
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5ce8d869
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [FORCE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27eedb64]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@64c63c79
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@64c63c79
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@64c63c79
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_READ]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@31c7528f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b76ff4e
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b76ff4e
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b76ff4e
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_WRITE]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a1234bf]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f62ea70
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f62ea70
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f62ea70
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [PESSIMISTIC_FORCE_INCREMENT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=? for update
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@24ba9639]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@38aa816f
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@38aa816f
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@38aa816f
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [OPTIMISTIC]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
 Starting root entity : ir.maktab.model.role.Role
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53f6fd09]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bffbc6d
.. Registering AssociationKey : AssociationKey(table=role, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bffbc6d
>> Starting entity identifier : ir.maktab.model.role.Role
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Visiting attribute path : features
>> Starting attribute Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
<< Finishing up attribute : Attribute(name=features, type=java.util.Set(ir.maktab.model.role.Role.features) [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bffbc6d
 Finished root entity : ir.maktab.model.role.Role
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Role)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Role, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

Static select for entity ir.maktab.model.role.Role [OPTIMISTIC_FORCE_INCREMENT]: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.role.Role: select role0_.id as id1_2_1_, role0_.name as name2_2_1_, features1_.role_id as role_id1_2_3_, feature2_.id as elt2_3_3_, feature2_.id as id1_1_0_, feature2_.name as name2_1_0_ from role role0_ left outer join role_features features1_ on role0_.id=features1_.role_id left outer join feature feature2_ on features1_.elt=feature2_.id where role0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.role.Role: select role0_.id as id1_2_1_, role0_.name as name2_2_1_, features1_.role_id as role_id1_2_3_, feature2_.id as elt2_3_3_, feature2_.id as id1_1_0_, feature2_.name as name2_1_0_ from role role0_ left outer join role_features features1_ on role0_.id=features1_.role_id left outer join feature feature2_ on features1_.elt=feature2_.id where role0_.id=?
Static SQL for entity: ir.maktab.model.contact.Contact
 Version select: select id from contact where id =?
 Snapshot select: select contact_.id, contact_.firstName as firstNam2_0_, contact_.lastName as lastName3_0_, contact_.email as email4_0_, contact_.mobile as mobile5_0_, contact_.home as home6_0_ from contact contact_ where contact_.id=?
 Insert 0: insert into contact (firstName, lastName, email, mobile, home, id) values (?, ?, ?, ?, ?, ?)
 Update 0: update contact set firstName=?, lastName=?, email=?, mobile=?, home=? where id=?
 Delete 0: delete from contact where id=?
 Identity insert: insert into contact (firstName, lastName, email, mobile, home) values (?, ?, ?, ?, ?)
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1b84f475]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7749bf93
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7749bf93
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7749bf93
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [NONE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13330ac6]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@539d019
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@539d019
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@539d019
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [READ]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@39a2bb97]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3ad2e17
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3ad2e17
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3ad2e17
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@8c3619e]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4331d187
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4331d187
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4331d187
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE_NOWAIT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6f63b475]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@554e218
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@554e218
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@554e218
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [UPGRADE_SKIPLOCKED]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1608bcbd]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5bf8fa12
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5bf8fa12
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5bf8fa12
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [FORCE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@29ca3d04]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b2c5e07
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b2c5e07
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b2c5e07
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_READ]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5812f68b]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4426bff1
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4426bff1
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4426bff1
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_WRITE]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c7c886c]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@55493582
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@55493582
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@55493582
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [PESSIMISTIC_FORCE_INCREMENT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=? for update
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a20270e]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b88ca8c
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b88ca8c
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6b88ca8c
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [OPTIMISTIC]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
 Starting root entity : ir.maktab.model.contact.Contact
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@336f1079]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f16c6b3
.. Registering AssociationKey : AssociationKey(table=contact, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f16c6b3
>> Starting entity identifier : ir.maktab.model.contact.Contact
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : email
>> Starting attribute Attribute(name=email, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=email, type=string [non-identifier])
Visiting attribute path : mobile
>> Starting attribute Attribute(name=mobile, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=mobile, type=string [non-identifier])
Visiting attribute path : home
>> Starting attribute Attribute(name=home, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=home, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2f16c6b3
 Finished root entity : ir.maktab.model.contact.Contact
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.contact.Contact)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.contact.Contact, querySpaceUid=<gen:0>, path=ir.maktab.model.contact.Contact)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.contact.Contact)
          - SQL table alias mapping - contact0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity ir.maktab.model.contact.Contact [OPTIMISTIC_FORCE_INCREMENT]: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.contact.Contact: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.contact.Contact: select contact0_.id as id1_0_0_, contact0_.firstName as firstNam2_0_0_, contact0_.lastName as lastName3_0_0_, contact0_.email as email4_0_0_, contact0_.mobile as mobile5_0_0_, contact0_.home as home6_0_0_ from contact contact0_ where contact0_.id=?
Static SQL for entity: ir.maktab.model.role.Feature
 Version select: select id from feature where id =?
 Snapshot select: select feature_.id, feature_.name as name2_1_ from feature feature_ where feature_.id=?
 Insert 0: insert into feature (name, id) values (?, ?)
 Update 0: update feature set name=? where id=?
 Delete 0: delete from feature where id=?
 Identity insert: insert into feature (name) values (?)
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@34158c08]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e4fcac
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e4fcac
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@19e4fcac
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [NONE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52c3cb31]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b79ac84
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b79ac84
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@4b79ac84
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [READ]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53941c2f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6dab9b6d
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6dab9b6d
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6dab9b6d
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21fd5faa]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2766ca9d
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2766ca9d
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2766ca9d
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE_NOWAIT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5460cf3a]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@65a15628
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@65a15628
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@65a15628
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [UPGRADE_SKIPLOCKED]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e6a5539]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3fc9504b
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3fc9504b
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3fc9504b
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [FORCE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d025197]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27d4a09
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27d4a09
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@27d4a09
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_READ]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e4204e2]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b7c4869
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b7c4869
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@b7c4869
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_WRITE]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@740d2e78]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1c481ff2
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1c481ff2
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1c481ff2
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [PESSIMISTIC_FORCE_INCREMENT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=? for update
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@72437d8d]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1b955cac
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1b955cac
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1b955cac
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [OPTIMISTIC]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
 Starting root entity : ir.maktab.model.role.Feature
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@676cf48]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5a1de7fb
.. Registering AssociationKey : AssociationKey(table=feature, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5a1de7fb
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5a1de7fb
 Finished root entity : ir.maktab.model.role.Feature
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.role.Feature)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:0>, path=ir.maktab.model.role.Feature)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.role.Feature)
          - SQL table alias mapping - feature0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

Static select for entity ir.maktab.model.role.Feature [OPTIMISTIC_FORCE_INCREMENT]: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.role.Feature: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.role.Feature: select feature0_.id as id1_1_0_, feature0_.name as name2_1_0_ from feature feature0_ where feature0_.id=?
Static SQL for entity: ir.maktab.model.user.User
 Version select: select id from user where id =?
 Snapshot select: select user_.id, user_.firstName as firstNam2_4_, user_.lastName as lastName3_4_, user_.password as password4_4_, user_.username as username5_4_, user_.role as role6_4_ from user user_ where user_.id=?
 Insert 0: insert into user (firstName, lastName, password, username, role, id) values (?, ?, ?, ?, ?, ?)
 Update 0: update user set firstName=?, lastName=?, password=?, username=?, role=? where id=?
 Delete 0: delete from user where id=?
 Identity insert: insert into user (firstName, lastName, password, username, role) values (?, ?, ?, ?, ?)
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@335b5620]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@29a0cdb
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@29a0cdb
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@29a0cdb
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [NONE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@32a68f4f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@73194df
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@73194df
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@73194df
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [READ]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6eb2384f]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3c9c0d96
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3c9c0d96
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3c9c0d96
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4621bd]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31dadd46
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31dadd46
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@31dadd46
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE_NOWAIT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4ed5eb72]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@12f9af83
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@12f9af83
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@12f9af83
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [UPGRADE_SKIPLOCKED]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@19b93fa8]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7e6ef134
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7e6ef134
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7e6ef134
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [FORCE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1f010bf0]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@40db2a24
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@40db2a24
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@40db2a24
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_READ]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? lock in share mode
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10cf09e8]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1921ad94
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1921ad94
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@1921ad94
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_WRITE]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ee86bcb]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@177bea38
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@177bea38
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@177bea38
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=? for update
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7f132176]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bca7e0d
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bca7e0d
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6bca7e0d
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [OPTIMISTIC]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root entity : ir.maktab.model.user.User
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2631f68c]
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6ed3f258
.. Registering AssociationKey : AssociationKey(table=user, columns={id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6ed3f258
>> Starting entity identifier : ir.maktab.model.user.User
Visiting attribute path : firstName
>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
Visiting attribute path : lastName
>> Starting attribute Attribute(name=lastName, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=lastName, type=string [non-identifier])
Visiting attribute path : password
>> Starting attribute Attribute(name=password, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=password, type=string [non-identifier])
Visiting attribute path : username
>> Starting attribute Attribute(name=username, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=username, type=string [non-identifier])
Visiting attribute path : role
>> Starting attribute Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
<< Finishing up attribute : Attribute(name=role, type=ir.maktab.model.role.Role [non-identifier,association])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@6ed3f258
 Finished root entity : ir.maktab.model.user.User
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=ir.maktab.model.user.User)
    - Returns
       - EntityReturnImpl(entity=ir.maktab.model.user.User, querySpaceUid=<gen:0>, path=ir.maktab.model.user.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=ir.maktab.model.user.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}

Static select for entity ir.maktab.model.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
Static select for action ACTION_MERGE on entity ir.maktab.model.user.User: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
Static select for action ACTION_REFRESH on entity ir.maktab.model.user.User: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
 Starting root collection : ir.maktab.model.role.Role.features
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@8ad6665]
Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@30af5b6b]
Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@19835e64
 Registering AssociationKey : AssociationKey(table=role_features, columns={role_id}) -> null
 Starting collection element graph : ir.maktab.model.role.Role.features
Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@68b32e3e
.. Registering AssociationKey : AssociationKey(table=role_features, columns={elt}) -> org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@68b32e3e
>> Starting entity identifier : ir.maktab.model.role.Feature
Visiting attribute path : name
>> Starting attribute Attribute(name=name, type=string [non-identifier])
<< Finishing up attribute : Attribute(name=name, type=string [non-identifier])
Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@68b32e3e
 Finished collection element graph : ir.maktab.model.role.Role.features
Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@19835e64
 Finished root collection : ir.maktab.model.role.Role.features
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(collection=ir.maktab.model.role.Role.features)
    - Returns
       - CollectionReturnImpl(collection=ir.maktab.model.role.Role.features, querySpaceUid=<gen:0>, path=[ir.maktab.model.role.Role.features])
          - (collection element) CollectionFetchableElementEntityGraph(entity=ir.maktab.model.role.Feature, querySpaceUid=<gen:1>, path=[ir.maktab.model.role.Role.features].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=ir.maktab.model.role.Role.features)
          - SQL table alias mapping - features0_
          - alias suffix - 0_
          - suffixed key columns - {role_id1_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=ir.maktab.model.role.Feature)
                - SQL table alias mapping - feature1_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}

Static select for collection ir.maktab.model.role.Role.features: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=?
Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
Registering SessionFactory: c9d0ba08-55b4-4b0a-88d1-af9540ddd051 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Starting secondPassCompile() processing
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Resolving reference to class: ir.maktab.model.role.Feature
Resolving reference to class: ir.maktab.model.role.Role
Resolving reference to class: ir.maktab.model.role.Role
Interpreting UniqueConstraintSchemaUpdateStrategy from setting : null
HHH000261: Table found: phonebook.contact
HHH000037: Columns: [firstname, mobile, id, email, lastname, home]
HHH000108: Foreign keys: []
HHH000126: Indexes: [uk_fall7a0t29r8fl38o1jlw8i3u, uk_gnqwbwwcn7x0m5jlt4158dass, primary, uk_2wfgmlebss5qjexvt021nge9j]
HHH000261: Table found: phonebook.feature
HHH000037: Columns: [name, id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: phonebook.role
HHH000037: Columns: [name, id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [uk_8sewwnpamngi6b1dwaa88askk, primary]
HHH000261: Table found: phonebook.role_features
HHH000037: Columns: [role_id, elt]
HHH000108: Foreign keys: []
HHH000126: Indexes: [fk_rtvpansxg6tbacol3obxytjq3, primary]
HHH000261: Table found: phonebook.user
HHH000037: Columns: [firstname, password, role, id, lastname, username]
HHH000108: Foreign keys: []
HHH000126: Indexes: [fk_dl7g53f7lpmorjc24kx74apx8, uk_sb8bbouer5wak8vyiiy4pf2bx, primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
alter table role_features add constraint FK_gx7g05jbqjx7evhxdlch6o0du foreign key (role_id) references role (id)
HHH000232: Schema update complete
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
Statistics initialized [enabled=false]
Opening Hibernate Session.  tenant=null, owner=null
Opened session at timestamp: 15196368932
begin
Obtaining JDBC connection
Obtained JDBC connection
initial autocommit status: false
Initializing service [role=org.hibernate.event.service.spi.EventListenerRegistry]
Loading entity: [ir.maktab.model.user.User#15]
Attempting to resolve: [ir.maktab.model.user.User#15]
Object not resolved in any cache: [ir.maktab.model.user.User#15]
Fetching entity: [ir.maktab.model.user.User#15]
select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=?
Registering statement [com.mysql.cj.jdbc.PreparedStatement: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=** NOT SPECIFIED **]
Registering last query statement [com.mysql.cj.jdbc.PreparedStatement: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=** NOT SPECIFIED **]
binding parameter [1] as [INTEGER] - [15]
Bound [2] parameters total
Registering result set [com.mysql.cj.jdbc.result.ResultSetImpl@555cf22]
Processing result set
Starting ResultSet row #0
On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.user.User#15]
Hydrating entity: [ir.maktab.model.user.User#15]
extracted value ([firstNam2_4_0_] : [VARCHAR]) - [Hamed]
extracted value ([lastName3_4_0_] : [VARCHAR]) - [Abbaszadeh ]
extracted value ([password4_4_0_] : [VARCHAR]) - [81DC9BDB52D04DC20036DBD8313ED055]
extracted value ([username5_4_0_] : [VARCHAR]) - [hamed]
extracted value ([role6_4_0_] : [INTEGER]) - [1]
Done processing result set (1 rows)
Total objects hydrated: 1
Resolving associations for [ir.maktab.model.user.User#15]
Loading entity: [ir.maktab.model.role.Role#1]
Creating new proxy for entity
Done materializing entity [ir.maktab.model.user.User#15]
Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@555cf22]
Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@555cf22]
Releasing statement [com.mysql.cj.jdbc.PreparedStatement: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=15]
Closing prepared statement [com.mysql.cj.jdbc.PreparedStatement: select user0_.id as id1_4_0_, user0_.firstName as firstNam2_4_0_, user0_.lastName as lastName3_4_0_, user0_.password as password4_4_0_, user0_.username as username5_4_0_, user0_.role as role6_4_0_ from user user0_ where user0_.id=15]
Starting after statement execution processing [ON_CLOSE]
Initializing non-lazy collections
Done entity load : ir.maktab.model.user.User#15
Loading entity: [ir.maktab.model.user.User#15]
Attempting to resolve: [ir.maktab.model.user.User#15]
Resolved object in session cache: [ir.maktab.model.user.User#15]
committing
Automatically flushing session
Flushing session
Processing flush-time cascades
Dirty checking collections
Flushing entities and processing referenced collections
Processing unreferenced collections
Scheduling collection removes/(re)creates/updates
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
ir.maktab.model.user.User{firstName=Hamed, lastName=Abbaszadeh , password=81DC9BDB52D04DC20036DBD8313ED055, role=ir.maktab.model.role.Role#1, id=15, username=hamed}
Executing flush
Starting after statement execution processing [ON_CLOSE]
Post flush
before transaction completion
committed JDBC Connection
after transaction completion
after transaction completion
55555555555555
First Logger in Hibernate
Initializing proxy: [ir.maktab.model.role.Role#1]
Attempting to resolve: [ir.maktab.model.role.Role#1]
Object not resolved in any cache: [ir.maktab.model.role.Role#1]
Fetching entity: [ir.maktab.model.role.Role#1]
select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=?
Registering statement [com.mysql.cj.jdbc.PreparedStatement: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=** NOT SPECIFIED **]
Registering last query statement [com.mysql.cj.jdbc.PreparedStatement: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=** NOT SPECIFIED **]
binding parameter [1] as [INTEGER] - [1]
Bound [2] parameters total
Registering result set [com.mysql.cj.jdbc.result.ResultSetImpl@1506f20f]
Processing result set
Starting ResultSet row #0
On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Role#1]
Hydrating entity: [ir.maktab.model.role.Role#1]
extracted value ([name2_2_0_] : [VARCHAR]) - [CEO]
Done processing result set (1 rows)
Total objects hydrated: 1
Resolving associations for [ir.maktab.model.role.Role#1]
Created collection wrapper: [ir.maktab.model.role.Role.features#1]
Done materializing entity [ir.maktab.model.role.Role#1]
Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@1506f20f]
Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@1506f20f]
Releasing statement [com.mysql.cj.jdbc.PreparedStatement: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=1]
Closing prepared statement [com.mysql.cj.jdbc.PreparedStatement: select role0_.id as id1_2_0_, role0_.name as name2_2_0_ from role role0_ where role0_.id=1]
Starting after statement execution processing [ON_CLOSE]
Initializing non-lazy collections
Done entity load : ir.maktab.model.role.Role#1
Initializing collection [ir.maktab.model.role.Role.features#1]
Checking second-level cache
Collection not cached
Loading collection: [ir.maktab.model.role.Role.features#1]
select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=?
Registering statement [com.mysql.cj.jdbc.PreparedStatement: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=** NOT SPECIFIED **]
Registering last query statement [com.mysql.cj.jdbc.PreparedStatement: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=** NOT SPECIFIED **]
binding parameter [1] as [INTEGER] - [1]
Bound [2] parameters total
Registering result set [com.mysql.cj.jdbc.result.ResultSetImpl@19553973]
Preparing collection intializer : [ir.maktab.model.role.Role.features#1]
Constructing collection load context for result set [com.mysql.cj.jdbc.result.ResultSetImpl@19553973]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Collection not yet initialized; initializing
Processing result set
Starting ResultSet row #0
extracted value ([id1_1_1_] : [INTEGER]) - [1]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#1]
Hydrating entity: [ir.maktab.model.role.Feature#1]
extracted value ([name2_1_1_] : [VARCHAR]) - [ReadUser]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [1]
Loading entity: [ir.maktab.model.role.Feature#1]
Attempting to resolve: [ir.maktab.model.role.Feature#1]
Resolved object in session cache: [ir.maktab.model.role.Feature#1]
Starting ResultSet row #1
extracted value ([id1_1_1_] : [INTEGER]) - [2]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#2]
Hydrating entity: [ir.maktab.model.role.Feature#2]
extracted value ([name2_1_1_] : [VARCHAR]) - [DeleteContact]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [2]
Loading entity: [ir.maktab.model.role.Feature#2]
Attempting to resolve: [ir.maktab.model.role.Feature#2]
Resolved object in session cache: [ir.maktab.model.role.Feature#2]
Starting ResultSet row #2
extracted value ([id1_1_1_] : [INTEGER]) - [3]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#3]
Hydrating entity: [ir.maktab.model.role.Feature#3]
extracted value ([name2_1_1_] : [VARCHAR]) - [ReadContact]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [3]
Loading entity: [ir.maktab.model.role.Feature#3]
Attempting to resolve: [ir.maktab.model.role.Feature#3]
Resolved object in session cache: [ir.maktab.model.role.Feature#3]
Starting ResultSet row #3
extracted value ([id1_1_1_] : [INTEGER]) - [4]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#4]
Hydrating entity: [ir.maktab.model.role.Feature#4]
extracted value ([name2_1_1_] : [VARCHAR]) - [CreateUser]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [4]
Loading entity: [ir.maktab.model.role.Feature#4]
Attempting to resolve: [ir.maktab.model.role.Feature#4]
Resolved object in session cache: [ir.maktab.model.role.Feature#4]
Starting ResultSet row #4
extracted value ([id1_1_1_] : [INTEGER]) - [5]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#5]
Hydrating entity: [ir.maktab.model.role.Feature#5]
extracted value ([name2_1_1_] : [VARCHAR]) - [DeleteUser]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [5]
Loading entity: [ir.maktab.model.role.Feature#5]
Attempting to resolve: [ir.maktab.model.role.Feature#5]
Resolved object in session cache: [ir.maktab.model.role.Feature#5]
Starting ResultSet row #5
extracted value ([id1_1_1_] : [INTEGER]) - [6]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#6]
Hydrating entity: [ir.maktab.model.role.Feature#6]
extracted value ([name2_1_1_] : [VARCHAR]) - [CreateContact]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [6]
Loading entity: [ir.maktab.model.role.Feature#6]
Attempting to resolve: [ir.maktab.model.role.Feature#6]
Resolved object in session cache: [ir.maktab.model.role.Feature#6]
Starting ResultSet row #6
extracted value ([id1_1_1_] : [INTEGER]) - [7]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#7]
Hydrating entity: [ir.maktab.model.role.Feature#7]
extracted value ([name2_1_1_] : [VARCHAR]) - [SeeUsersActivity]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [7]
Loading entity: [ir.maktab.model.role.Feature#7]
Attempting to resolve: [ir.maktab.model.role.Feature#7]
Resolved object in session cache: [ir.maktab.model.role.Feature#7]
Starting ResultSet row #7
extracted value ([id1_1_1_] : [INTEGER]) - [8]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#8]
Hydrating entity: [ir.maktab.model.role.Feature#8]
extracted value ([name2_1_1_] : [VARCHAR]) - [UpdateUser]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [8]
Loading entity: [ir.maktab.model.role.Feature#8]
Attempting to resolve: [ir.maktab.model.role.Feature#8]
Resolved object in session cache: [ir.maktab.model.role.Feature#8]
Starting ResultSet row #8
extracted value ([id1_1_1_] : [INTEGER]) - [9]
hydrating entity state
Initializing object from ResultSet: [ir.maktab.model.role.Feature#9]
Hydrating entity: [ir.maktab.model.role.Feature#9]
extracted value ([name2_1_1_] : [VARCHAR]) - [UpdateContact]
extracted value ([role_id1_2_0_] : [INTEGER]) - [1]
Found row of collection: [ir.maktab.model.role.Role.features#1]
Starting attempt to find loading collection [[ir.maktab.model.role.Role.features#1]]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Found loading collection bound to current result set processing; reading row
extracted value ([elt2_3_0_] : [INTEGER]) - [9]
Loading entity: [ir.maktab.model.role.Feature#9]
Attempting to resolve: [ir.maktab.model.role.Feature#9]
Resolved object in session cache: [ir.maktab.model.role.Feature#9]
Done processing result set (9 rows)
Total objects hydrated: 9
Resolving associations for [ir.maktab.model.role.Feature#1]
Done materializing entity [ir.maktab.model.role.Feature#1]
Resolving associations for [ir.maktab.model.role.Feature#2]
Done materializing entity [ir.maktab.model.role.Feature#2]
Resolving associations for [ir.maktab.model.role.Feature#3]
Done materializing entity [ir.maktab.model.role.Feature#3]
Resolving associations for [ir.maktab.model.role.Feature#4]
Done materializing entity [ir.maktab.model.role.Feature#4]
Resolving associations for [ir.maktab.model.role.Feature#5]
Done materializing entity [ir.maktab.model.role.Feature#5]
Resolving associations for [ir.maktab.model.role.Feature#6]
Done materializing entity [ir.maktab.model.role.Feature#6]
Resolving associations for [ir.maktab.model.role.Feature#7]
Done materializing entity [ir.maktab.model.role.Feature#7]
Resolving associations for [ir.maktab.model.role.Feature#8]
Done materializing entity [ir.maktab.model.role.Feature#8]
Resolving associations for [ir.maktab.model.role.Feature#9]
Done materializing entity [ir.maktab.model.role.Feature#9]
Attempting to locate loading collection entry [CollectionKey[ir.maktab.model.role.Role.features#1]] in any result-set context
Collection [CollectionKey[ir.maktab.model.role.Role.features#1]] located in load context
Removing collection load entry [org.hibernate.engine.loading.internal.LoadingCollectionEntry<rs=com.mysql.cj.jdbc.result.ResultSetImpl@19553973, coll=[ir.maktab.model.role.Role.features#1]>@42f33b5d]
1 collections were found in result set for role: ir.maktab.model.role.Role.features
Ending loading collection [org.hibernate.engine.loading.internal.LoadingCollectionEntry<rs=com.mysql.cj.jdbc.result.ResultSetImpl@19553973, coll=[ir.maktab.model.role.Role.features#1]>@42f33b5d]
Collection fully initialized: [ir.maktab.model.role.Role.features#1]
1 collections initialized for role: ir.maktab.model.role.Role.features
Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@19553973]
Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@19553973]
Releasing statement [com.mysql.cj.jdbc.PreparedStatement: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=1]
Closing prepared statement [com.mysql.cj.jdbc.PreparedStatement: select features0_.role_id as role_id1_2_0_, features0_.elt as elt2_3_0_, feature1_.id as id1_1_1_, feature1_.name as name2_1_1_ from role_features features0_ inner join feature feature1_ on features0_.elt=feature1_.id where features0_.role_id=1]
Starting after statement execution processing [ON_CLOSE]
Initializing non-lazy collections
Done loading collection
Collection initialized
